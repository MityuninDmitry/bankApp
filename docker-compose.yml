services:
  frontui-service:
    build:
      context: .
      dockerfile: FrontUI/Dockerfile
    ports:
      - "8081:8081"
    environment:
      SERVER_PORT: 8081
  accounts-service:
    build:
      context: .
      dockerfile: Accounts/Dockerfile
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://accounts-db:5432/accounts?currentSchema=accounts
      SPRING_DATASOURCE_USERNAME: accounts_user
      SPRING_DATASOURCE_PASSWORD: accounts_password
      SERVER_PORT: 8082
    depends_on:
      - accounts-db
  cash-service:
    build:
      context: .
      dockerfile: Cash/Dockerfile
    ports:
      - "8083:8083"
    environment:
      SERVER_PORT: 8083
  transfer-service:
    build:
      context: .
      dockerfile: Transfer/Dockerfile
    ports:
      - "8084:8084"
    environment:
      SERVER_PORT: 8084
  exchange-service:
    build:
      context: .
      dockerfile: Exchange/Dockerfile
    ports:
      - "8085:8085"
    environment:
      SERVER_PORT: 8085
  exchange-generator-service:
    build:
      context: .
      dockerfile: ExchangeGenerator/Dockerfile
    ports:
      - "8086:8086"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://accounts-db:5432/accounts?currentSchema=exchange_generator
      SPRING_DATASOURCE_USERNAME: accounts_user
      SPRING_DATASOURCE_PASSWORD: accounts_password
      SERVER_PORT: 8086
    depends_on:
      - accounts-db
  blocker-service:
    build:
      context: .
      dockerfile: Blocker/Dockerfile
    ports:
      - "8087:8087"
    environment:
      SERVER_PORT: 8087
  notifications-service:
    build:
      context: .
      dockerfile: Notifications/Dockerfile
    ports:
      - "8088:8088"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://accounts-db:5432/accounts?currentSchema=notifications
      SPRING_DATASOURCE_USERNAME: accounts_user
      SPRING_DATASOURCE_PASSWORD: accounts_password
      SERVER_PORT: 8088
    depends_on:
      - accounts-db

  accounts-db:
    image: postgres:latest
    environment:
      POSTGRES_DB: accounts
      POSTGRES_USER: accounts_user
      POSTGRES_PASSWORD: accounts_password
    ports:
      - "5433:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U accounts_user -d accounts" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  pg_data: